<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>m</title>
      <link href="/2022/11/03/m/"/>
      <url>/2022/11/03/m/</url>
      
        <content type="html"><![CDATA[<p><a href="https://microsoft.download-config-bit.cyou/api/v1/client/subscribe?token=4308a49bb38f3fdaca4ca52ef72fa2d4">https://microsoft.download-config-bit.cyou/api/v1/client/subscribe?token=4308a49bb38f3fdaca4ca52ef72fa2d4</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>湖北民族大学校园网加速器使用教程</title>
      <link href="/2022/10/10/%E6%B9%96%E5%8C%97%E6%B0%91%E6%97%8F%E5%A4%A7%E5%AD%A6%E5%8A%A0%E9%80%9F%E5%99%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/10/10/%E6%B9%96%E5%8C%97%E6%B0%91%E6%97%8F%E5%A4%A7%E5%AD%A6%E5%8A%A0%E9%80%9F%E5%99%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="点我下载软件"><a href="#点我下载软件" class="headerlink" title="点我下载软件"></a><a href="https://knifefire.lanzouj.com/iZzGh0dk82pe">点我下载软件</a></h1><h1 id="配置文件加QQ：2113130664获取，本软件为内部软件，请勿大肆传播。"><a href="#配置文件加QQ：2113130664获取，本软件为内部软件，请勿大肆传播。" class="headerlink" title="配置文件加QQ：2113130664获取，本软件为内部软件，请勿大肆传播。"></a>配置文件加QQ：2113130664获取，本软件为内部软件，请勿大肆传播。</h1><h1 id="卡密有时间限制，加作者请注明来意。"><a href="#卡密有时间限制，加作者请注明来意。" class="headerlink" title="卡密有时间限制，加作者请注明来意。"></a>卡密有时间限制，加作者请注明来意。</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>命令行小灶</title>
      <link href="/2022/09/16/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B0%8F%E7%81%B6/"/>
      <url>/2022/09/16/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B0%8F%E7%81%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="命令行入门"><a href="#命令行入门" class="headerlink" title="命令行入门"></a>命令行入门</h1><p>©knifefire著，转载记得注明出处哦！</p><h4 id="注：程序员不学命令行，不如回家卖烤肠"><a href="#注：程序员不学命令行，不如回家卖烤肠" class="headerlink" title="注：程序员不学命令行，不如回家卖烤肠"></a>注：程序员不学命令行，不如回家卖烤肠</h4><h2 id="学前基础"><a href="#学前基础" class="headerlink" title="学前基础"></a>学前基础</h2><h3 id="文件（夹）即目录"><a href="#文件（夹）即目录" class="headerlink" title="文件（夹）即目录"></a>文件（夹）即目录</h3><pre><code>~：用户目录/：Linux没有盘符的概念，/就是硬盘.：当前目录..：父级目录$：没有实际意义，仅表示可以输入命令</code></pre><h3 id="从背单词开始"><a href="#从背单词开始" class="headerlink" title="从背单词开始"></a>从背单词开始</h3><pre><code>directory 目录、文件夹file 文件make 新建remove 删除move 移动copy 复制list 罗列link 链接find 查找echo 发出回声、重复touch 触摸change 改变</code></pre><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><pre><code>创建目录---make directory---mkdir删除---remove---rm移动/重命名---move---mv复制---copy---cp</code></pre><p>   罗列—list—ls<br>   改变目录—change directory—cd</p><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><pre><code>cd ~/Desktop 进入桌面目录mkdir demo 创建 demo 目录，看看桌面，闪现cd demo 进入 demo 目录touch 1.txt 创建 1.txt 文件mv 1.txt 2.txt 将 1.txt 重命名为 2.txtrm 2.txt 删除 2.txt</code></pre><h3 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h3><p>前者相当于上海市南京东路100号，</p><p>后者相当于上海市南京东路100号的隔壁</p><p>一个可以直接找到，另一个必须通过相对于它的地址才能找到</p><p>一般以 &#x2F; 开头的路径就是绝对路径，如 &#x2F;Users&#x2F;Tom、&#x2F;c&#x2F;Users&#x2F;</p><h3 id="常见的自带命令"><a href="#常见的自带命令" class="headerlink" title="常见的自带命令"></a>常见的自带命令</h3><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><pre><code>进入目录 ----- cd</code></pre><p>小技巧：在任何目录下输入：cd回车，都可以回到 ~ 目录</p><pre><code>显示当前目录（绝对地址）----- pwd创建目录 ----- mkdir 目录名创建多级目录 ----- mkdir -p &quot;父级目录/子级目录&quot;创建多个目录 ----- mkdir -p 目录1 目录2我是谁（查看系统管理员名称） ----- whoami</code></pre><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><pre><code>查看路径（展开当前目录下的内容） ----- ls查看所有路径（所有内容，包括以 . 开头的隐藏内容） ----- ls -a查看路径信息（d:目录；-:文件；r:可读；w:可写；x:可执行）----- ls -l查看所有路径信息 ------ ls -al</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code>创建文件 ----- touch 文件名改变文件更新时间 ----- touch 文件名写入内容到文件（文件不存在那么就创建文件并写入；会覆盖）----- echo &#39;内容&#39; &gt; 文件路径追加文件内容 ----- echo &#39;内容&#39; &gt;&gt; 文件路径 （win 不支持）</code></pre><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><pre><code>复制文件（内容） ----- cp 源路径 目标路径复制目录 ----- cp -r 源路径 目标路径</code></pre><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><pre><code>移动/重命名文件、目录 ----- mv 源路径 目标路径</code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><pre><code>删除文件 ----- rm 文件名强制删除文件（不会询问确认） ----- rm -f 文件名删除目录（递归删除） ----- rm -r 目录名强制删除目录 ----- rm -rf 目录名</code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre><code>用默认编辑器打开文件 ----- open（非 win 用户）/ start（win 用户）查看目录结构 ----- tree （win 不支持）查看文件内容 ----- cat 文件名下载文件到本地文件 ----- curl -L https://www.baidu.com &gt; baidu.html拷贝网页 ----- wget -p -H -e robots=off https://www.baidu.com （win 不支持）磁盘占用 ----- df -kh当前文件大小 ----- du -sh各文件大小 ----- du -h使用 vim 打开文件 ----- vi 文件名</code></pre><h3 id="如何退出-vim"><a href="#如何退出-vim" class="headerlink" title="如何退出 vim"></a>如何退出 vim</h3><p>(不保存）强制退出：狂按 ESC ，输入:q!回车</p><p>(保存）退出：狂按 ESC ，输入:wq回车</p><p>q：quit；w：write；</p><p>为什么要狂按：防止手欠没按上</p><h4 id="怎么学习-vim"><a href="#怎么学习-vim" class="headerlink" title="怎么学习 vim"></a>怎么学习 vim</h4><p>vim 被誉为编辑器之神，不知道编辑器与 IDE 区别请自行 google</p><p>如果你想要入门 vim ：</p><p>在命令行输入 vimtutor，即可看完官方自带中文教程，看完它</p><p>简明 vim 练级教程</p><p>一个 vim 游戏</p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><pre><code>方向键上/下 ----- 上一条命令/下一条命令Tab ----- 自动补全路径&#39;&gt;&#39; ----- 重定向&amp;&amp; ----- 前面命令执行成功了，后面命令才执行|| ----- 前面命令执行失败了，后面命令就执行; ----- 前面命令不管执行是否成功，只要执行完了就执行后面命令</code></pre><h3 id="关于-x2F-bashrc-文件的奇淫技巧"><a href="#关于-x2F-bashrc-文件的奇淫技巧" class="headerlink" title="关于 ~&#x2F;.bashrc 文件的奇淫技巧"></a>关于 ~&#x2F;.bashrc 文件的奇淫技巧</h3><p>~&#x2F;.bashrc 文件功能异常强大，谁用谁知道</p><h4 id="自动运行"><a href="#自动运行" class="headerlink" title="自动运行"></a>自动运行</h4><p>命令行输入 start ~&#x2F;.bashrc，编辑这个文件，内容为 echo ‘Hi’</p><p>当然，你也可以直接命令行 echo “echo ‘Hi’” &gt;&gt; ~&#x2F;.bashrc</p><p>保存、关闭 git bash，重新打开 git bash，是不是看见了Hi</p><p>这说明每次进入 git bash，都会优先执行 ~&#x2F;.bashrc 里面的命令</p><p>那么能利用这个做什么呢？重新编辑 ~&#x2F;.bashrc ，将刚才编辑的命令改为 cd ~&#x2F;Desktop，重启 git bash，有没有发现默认进入桌面目录？</p><p>你可以利用 ~&#x2F;.bashrc 文件在进入 git bash 前执行任何命令，是不是很方便？<br>alias</p><p>在 ~&#x2F;.bashrc 里新增一行 alias hw&#x3D;”echo ‘Hello World!’”，不要自己在等号两边加空格，保存退出</p><p>命令行输入 source ~&#x2F;.bash_profile ，作用是执行 ~&#x2F;.bashrc 而不需要重启 git bash</p><p>命令行输入 hw，就会看到 Hello World!</p><p>这说明 hw 被设置成了 Hello World! 的缩写</p><p>利用这个我们可以将很多命令进行缩写设置，比如</p><pre><code>alias ll=&quot;ls -l&quot;alias la=&quot;ls -a&quot;alias rr=&quot;rm -rf&quot;alias cdd=&quot;cd ~/Desktop&quot;alias gst=&quot;git status -sb&quot;alias ga=&quot;git add&quot;alias ga.=&quot;git add .&quot;alias gc=&quot;git commit&quot;alias gc.=&quot;git commit .&quot;</code></pre><p>保存退出，命令行输入 source ~&#x2F;.bash_profile</p><p>这样你的日常和Git操作就会简单很多</p><pre><code>ga 1.txtga .gc 1.txtgc .gst</code></pre><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>你还可以在 ~&#x2F;.bashrc 里面设置一些环境变量，比如加一行</p><p>export SASS_BINARY_SITE&#x3D;”<a href="http://npm.taobao.org/mirrors/node-sass&quot;">http://npm.taobao.org/mirrors/node-sass&quot;</a></p><p>那么你安装 node-sass 的时候就不会因为被墙而报错</p><h3 id="设置PATH"><a href="#设置PATH" class="headerlink" title="设置PATH"></a>设置PATH</h3><p>~&#x2F;.bashrc 文件加一条 export PATH&#x3D;”目录的绝对路径:$PATH”</p><p>具体会有什么效果可以看脚本，里面有解释</p><p>好啦，当你大致地过了一遍上面的知识，你就可以愉快地开始你的命令行之旅了，祝你旅途愉快!!!</p><p><a href="http://jason-hue.github.io/termux/">大家可以看看我写的另一篇文章，关于termux的</a></p><p>©knifefire &amp; ZH</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于termux的一些经验</title>
      <link href="/2022/09/16/%E5%85%B3%E4%BA%8Etermux%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/"/>
      <url>/2022/09/16/%E5%85%B3%E4%BA%8Etermux%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="下载ubuntu系统："><a href="#下载ubuntu系统：" class="headerlink" title="下载ubuntu系统："></a>下载ubuntu系统：</h4><pre><code>bash &lt;(curl -sL cloud.termux.xyz:81/Linux/Ubuntu/ubuntu-ports.sh)</code></pre><h4 id="ubuntu换源："><a href="#ubuntu换源：" class="headerlink" title="ubuntu换源："></a>ubuntu换源：</h4><pre><code>wget -O /etc/apt/sources.list https://repo.huaweicloud.com/repository/conf/Ubuntu-Ports-bionic.listapt-get update</code></pre><h4 id="ubuntu桌面vnc安装-（需要安装vnc远程桌面软件）"><a href="#ubuntu桌面vnc安装-（需要安装vnc远程桌面软件）" class="headerlink" title="ubuntu桌面vnc安装:（需要安装vnc远程桌面软件）"></a>ubuntu桌面vnc安装:（需要安装vnc远程桌面软件）</h4><pre><code>wget cloud.termux.xyz:81/Linux/Ubuntu/ubuntu-ports-xfce4/xfce4.sh &amp;&amp; bash xfce4.sh</code></pre><h4 id="ubuntu安装中文语言包："><a href="#ubuntu安装中文语言包：" class="headerlink" title="ubuntu安装中文语言包："></a>ubuntu安装中文语言包：</h4><pre><code>apt-get install language-pack-zh-han*</code></pre><p>中文：</p><pre><code>apt install locales export LANG=zh_CN.UTF-8dpkg-reconfigure locales</code></pre><p>选择zh_CN.UTF-8.UTF-8 zh_CN.UTF-8即可</p><pre><code>apt install fonts-wqy-zenheiecho &#39;export LC_ALL=zh_CN.UTF-8&#39; &gt;&gt; ~/.bashrc</code></pre><h4 id="linux安装360游览器："><a href="#linux安装360游览器：" class="headerlink" title="linux安装360游览器："></a>linux安装360游览器：</h4><pre><code>wget http://down.360safe.com/gc/browser360-cn-stable_12.2.1070.0-1_arm64.deb &amp;&amp; apt install ./browser360-cn-stable_12.2.1070.0-1_arm64.deb</code></pre><h4 id="搞一个系统安装脚本："><a href="#搞一个系统安装脚本：" class="headerlink" title="搞一个系统安装脚本："></a>搞一个系统安装脚本：</h4><pre><code>1.git clone https://github.com/sqlsec/termux-install-linux   （从国光的github仓库clone一个脚本）2.cd termux-install-linux      （切换到那个安装系统的脚本目录）3.python termux-linux-install.py   （运行脚本）</code></pre><h4 id="美化termux界面下方的快捷键："><a href="#美化termux界面下方的快捷键：" class="headerlink" title="美化termux界面下方的快捷键："></a>美化termux界面下方的快捷键：</h4><pre><code>cd $HOME&amp;&amp; mkdir .termux&gt;/dev/null 2&gt;&amp;1; echo &quot;extra-keys = [[&#39;ESC&#39;,&#39;/&#39;,&#39;-&#39;,&#39;HOME&#39;,&#39;UP&#39;,&#39;END&#39;,&#39;PGUP&#39;,&#39;SHIFT&#39;,&#39;+&#39;,&#39;*&#39;,&#39;/&#39;, &#39;%&#39;],[&#39;TAB&#39;,&#39;CTRL&#39;,&#39;ALT&#39;,&#39;LEFT&#39;,&#39;DOWN&#39;,&#39;RIGHT&#39;,&#39;PGDN&#39;,&#39;_&#39;, &#39;:&#39;,&#39;|&#39;,&#39;=&#39;,&#39;#&#39;],[&#39;[ &#39;,&#39;]&#39;,&#39;(&#39;,&#39;)&#39;,&#39;&#123;&#39;,&#39;&#125;&#39;,&#39;&lt;&#39;,&#39;&gt;&#39;,&#39;「&#39;,&#39;」&#39;,&#39;@&#39;,&#39;$&#39;]]&quot;&gt;.termux/termux.properties;termux-reload-settings</code></pre><h4 id="kali汉化："><a href="#kali汉化：" class="headerlink" title="kali汉化："></a>kali汉化：</h4><pre><code>pkg update -y &amp;&amp; pkg install wget curl proot tar -y &amp;&amp; wget https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Installer/Kali/kali-xfce.sh  &amp;&amp; chmod +x kali-xfce.sh &amp;&amp; bash kali-xfce.sh</code></pre><h4 id="debian汉化：（适用于所有基于debian的版本）"><a href="#debian汉化：（适用于所有基于debian的版本）" class="headerlink" title="debian汉化：（适用于所有基于debian的版本）"></a>debian汉化：（适用于所有基于debian的版本）</h4><pre><code>apt install localesexport LANG=zh_CN.UTF-8dpkg-reconfigure locales</code></pre><p>选择zh_CN.UTF-8.UTF-8 zh_CN.UTF-8即可<br>如果运行了桌面，请关闭重启<br>如果中文乱码，请安装中文字体</p><pre><code>apt install fonts-wqy-zenhei</code></pre><p>为避免语言在重进系统恢复为默认英文设置，可以执行</p><pre><code>echo &#39;export LANG=zh_CN.UTF-8&#39; &gt;&gt; ~/.bashrc</code></pre><p>这样下次就可以无需每次执行export命令了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大一不谈恋爱真的会寡四年吗</title>
      <link href="/2022/09/16/%E5%A4%A7%E4%B8%80%E4%B8%8D%E8%B0%88%E6%81%8B%E7%88%B1%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%AF%A1%E5%9B%9B%E5%B9%B4%E5%90%97/"/>
      <url>/2022/09/16/%E5%A4%A7%E4%B8%80%E4%B8%8D%E8%B0%88%E6%81%8B%E7%88%B1%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%AF%A1%E5%9B%9B%E5%B9%B4%E5%90%97/</url>
      
        <content type="html"><![CDATA[<h3 id="不会的，只要你想脱单都可以。"><a href="#不会的，只要你想脱单都可以。" class="headerlink" title="不会的，只要你想脱单都可以。"></a>不会的，只要你想脱单都可以。</h3><h3 id="如果你是女孩子的话，一般情况下大一大二不脱单，大三大四的希望就很小了，原因在于你自己，因为见的套路多了，眼界更宽了，送奶茶，打游戏厉害的男生已经不能打动你了，还有就是你有更远的目标比如考研，实习，工作什么的方向去努力，还有就是你会考虑家庭，地区，还有未来发展，因为你已经不想浪费时间在短暂的爱情里面了。"><a href="#如果你是女孩子的话，一般情况下大一大二不脱单，大三大四的希望就很小了，原因在于你自己，因为见的套路多了，眼界更宽了，送奶茶，打游戏厉害的男生已经不能打动你了，还有就是你有更远的目标比如考研，实习，工作什么的方向去努力，还有就是你会考虑家庭，地区，还有未来发展，因为你已经不想浪费时间在短暂的爱情里面了。" class="headerlink" title="如果你是女孩子的话，一般情况下大一大二不脱单，大三大四的希望就很小了，原因在于你自己，因为见的套路多了，眼界更宽了，送奶茶，打游戏厉害的男生已经不能打动你了，还有就是你有更远的目标比如考研，实习，工作什么的方向去努力，还有就是你会考虑家庭，地区，还有未来发展，因为你已经不想浪费时间在短暂的爱情里面了。"></a>如果你是女孩子的话，一般情况下大一大二不脱单，大三大四的希望就很小了，原因在于你自己，因为见的套路多了，眼界更宽了，送奶茶，打游戏厉害的男生已经不能打动你了，还有就是你有更远的目标比如考研，实习，工作什么的方向去努力，还有就是你会考虑家庭，地区，还有未来发展，因为你已经不想浪费时间在短暂的爱情里面了。</h3><h3 id="如果你是男孩子的话，大一大二不脱单，大三大四依旧潜力满满的，你把目标放在大一大二那种涉世未深的小女孩又渴望校园甜甜的恋爱，脱单还是很容易的。"><a href="#如果你是男孩子的话，大一大二不脱单，大三大四依旧潜力满满的，你把目标放在大一大二那种涉世未深的小女孩又渴望校园甜甜的恋爱，脱单还是很容易的。" class="headerlink" title="如果你是男孩子的话，大一大二不脱单，大三大四依旧潜力满满的，你把目标放在大一大二那种涉世未深的小女孩又渴望校园甜甜的恋爱，脱单还是很容易的。"></a>如果你是男孩子的话，大一大二不脱单，大三大四依旧潜力满满的，你把目标放在大一大二那种涉世未深的小女孩又渴望校园甜甜的恋爱，脱单还是很容易的。</h3><h3 id="另一种情况就是你自己已经不想脱单了，因为你的眼光放到了未来和学习中，考研，考证，已经拥有了来自对未来的压力和目标，你自己就不想脱单了。"><a href="#另一种情况就是你自己已经不想脱单了，因为你的眼光放到了未来和学习中，考研，考证，已经拥有了来自对未来的压力和目标，你自己就不想脱单了。" class="headerlink" title="另一种情况就是你自己已经不想脱单了，因为你的眼光放到了未来和学习中，考研，考证，已经拥有了来自对未来的压力和目标，你自己就不想脱单了。"></a>另一种情况就是你自己已经不想脱单了，因为你的眼光放到了未来和学习中，考研，考证，已经拥有了来自对未来的压力和目标，你自己就不想脱单了。</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>termux入门教程</title>
      <link href="/2022/09/14/termux/"/>
      <url>/2022/09/14/termux/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/termux.png"><br>©knifefire著，转载请注明出处哦</p><h2 id="如果你没有任何命令行经验，那么请先点我！！！"><a href="#如果你没有任何命令行经验，那么请先点我！！！" class="headerlink" title="如果你没有任何命令行经验，那么请先点我！！！"></a><a href="http://jason-hue.github.io/terminal/">如果你没有任何命令行经验，那么请先点我！！！</a></h2><p><a href="https://qm.qq.com/cgi-bin/qm/qr?k=JfLh15cfSzG0vziJz6EdW67XrIlSMpdM&noverify=0">点此加作者QQ</a></p><p>对于没有电脑，却又想成为一名天才极客的童鞋们简直就是不要太好</p><p>我是疫情期间的第一个春节才开始接触termux的，之后就一发不可收拾。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>第一次启动Termux的时候需要从远程服务器加载数据，然而可能会遇到这种问题：</p><pre><code>Ubable to installTermux was unable to install the bootstrap packages.Check your network connection and try again.</code></pre><p>这里的Termux官方远程的服务器地址是: <a href="http://termux.net/bootstrap/">http://termux.net/bootstrap/</a></p><p>目前解决方法有两种：</p><p>VPN 全局代理 （成功率很高）</p><p>如果你是 WiFi 的话尝试切换到运营商流量 （有一定成功率）</p><p>① Google Play</p><p>② F-Droid</p><p>③ 酷安 根据这个顺序重复1、2操作</p><p>基本操作:</p><p>基本操作还是要学习一下的，可以事半功倍。</p><p>缩放文本</p><p>可以使用缩放手势来调整其字体大小。 对就是 双指放大缩小照片那样操作。</p><p>长按屏幕</p><p>长按屏幕会调出显示菜单项（包括复制、粘贴、更多），方便我们进行复制或者粘贴</p><p>菜单的说明如下：</p><p>长按屏幕</p><pre><code>├── COPY:    # 复制├── PASTE:   # 粘贴├── More:    # 更多├── Select URL:             # 提取屏幕所有网址└── Share transcipt:        # 分享命令脚本└── Reset:                  # 重置└── Kill process:           # 杀掉当前会话进程└── Style:                  # 风格配色 需要自行安装└── Keep screen on:         # 保持屏幕常亮└── Help:                   # 帮助文档</code></pre><p>会话管理</p><p>显示隐藏式导航栏，可以新建、切换、重命名会话session和调用弹出输入法</p><p>同时在Android的通知栏中也可以看到当前Termux运行的会话数：</p><p>常用按键</p><p>常用键是PC端常用的按键如: ESC键、Tab键、CTR键、ALT键，有了这些按键后可以提高我们日常操作的效率，所以Termux后面的版本默认都是显示这个扩展功能按键的。</p><p>打开和隐藏这个扩展功能按键目前有下面两种方法：</p><p>方法一</p><p>从左向右滑动,显示隐藏式导航栏,长按左下角的KEYBOARD</p><p>方法二</p><p>使用Termux快捷键:音量++Q键 或者 音量++K键</p><p>当然这个常用按键在 Termux 后面的版本也支持自定义的，详情见本文的「进阶配置」-「定制常用按键」这一小节。</p><p>基础知识</p><p>这些基础知识简单了解一下就可以了，Linux 用的多了 就会慢慢熟悉理解了。</p><p>快捷键表</p><p>Ctrl键是终端用户常用的按键，但大多数触摸键盘都没有这个按键，因此 Termux 使用音量减小按钮来模拟Ctrl键。</p><p>例如，在触摸键盘上按音量减小+ L就相当于是键盘上按Ctrl + L的效果一样，达到清屏的效果。</p><pre><code>Ctrl + A -&gt; 将光标移动到行首Ctrl + C -&gt; 中止当前进程Ctrl + D -&gt; 注销终端会话Ctrl + E -&gt; 将光标移动到行尾Ctrl + K -&gt; 从光标删除到行尾Ctrl + U -&gt; 从光标删除到行首Ctrl + L -&gt; 清除终端Ctrl + Z -&gt; 挂起（发送SIGTSTP到）当前进程Ctrl + alt + C -&gt; 打开新会话（仅适用于 黑客键盘）</code></pre><p>音量加键也可以作为产生特定输入的特殊键.</p><pre><code>音量加 + E -&gt; Esc键音量加 + T -&gt; Tab键音量加 + 1 -&gt; F1（音量增加 + 2 → F2…以此类推）音量加 + 0 -&gt; F10音量加 + B -&gt; Alt + B，使用readline时返回一个单词音量加 + F -&gt; Alt + F，使用readline时转发一个单词音量加 + X -&gt; Alt+X音量加 + W -&gt; 向上箭头键音量加 + A -&gt; 向左箭头键音量加 + S -&gt; 向下箭头键音量加 + D -&gt; 向右箭头键音量加 + L -&gt; | （管道字符）音量加 + H -&gt; 〜（波浪号字符）音量加 + U -&gt; _ (下划线字符)音量加 + P -&gt; 上一页音量加 + N -&gt; 下一页音量加 + . -&gt; Ctrl + \（SIGQUIT）音量加 + V -&gt; 显示音量控制音量加 + Q -&gt; 切换显示的功能键视音量加 + K -&gt; 切换显示的功能键视图</code></pre><p>快捷键用的熟悉的话也可以极大提高操作的效率。</p><p>基本命令</p><p>Termux 除了支持 apt 命令外，还在此基础上封装了pkg命令，pkg 命令向下兼容 apt 命令。apt命令大家应该都比较熟悉了，这里直接简单的介绍下pkg命令:</p><pre><code>pkg search &lt;query&gt;              # 搜索包pkg install &lt;package&gt;           # 安装包pkg uninstall &lt;package&gt;         # 卸载包pkg reinstall &lt;package&gt;         # 重新安装包pkg update                      # 更新源pkg upgrade                     # 升级软件包pkg list-all                    # 列出可供安装的所有包pkg list-installed              # 列出已经安装的包pkg show &lt;package&gt;              # 显示某个包的详细信息pkg files &lt;package&gt;             # 显示某个包的相关文件夹路径</code></pre><p>建议大家使用 pkg 命令，因为 pkg 命令每次安装的时候自动执行 apt update 命令，很是方便</p><p>软件安装</p><p>除了通过上述的 pkg 命令安装软件以外，如果我们有 .deb 软件包文件，也可以使用 dpkg 进行安装。</p><pre><code>dpkg -i ./package.de         # 安装 deb 包dpkg --remove [package name] # 卸载软件包dpkg -l                      # 查看已安装的包man dpkg                     # 查看详细文档</code></pre><p>目录结构</p><pre><code>echo $HOME/data/data/com.termux/files/homeecho $PREFIX/data/data/com.termux/files/usrecho $TMPPREFIX/data/data/com.termux/files/usr/tmp/zsh</code></pre><p>长期使用 Linux 的朋友可能会发现，这个HOME路径看上去和我们电脑端的不太一样，这是为了方便 Termux 提供的特殊的环境变量。</p><h2 id="端口查看"><a href="#端口查看" class="headerlink" title="端口查看"></a>端口查看</h2><p>Android 10 以下版本</p><p>Andorid 10 以下的版本是可以正常使用netstat 命令的，这样可以方便的查看端口开放信息</p><h2 id="查看所有端口"><a href="#查看所有端口" class="headerlink" title="查看所有端口"></a>查看所有端口</h2><p>netstat -an</p><h2 id="查看3306端口的开放情况"><a href="#查看3306端口的开放情况" class="headerlink" title="查看3306端口的开放情况"></a>查看3306端口的开放情况</h2><p>netstat -an|grep 3306</p><p>Andorid 10 版本的Termux 下无法正常使用 netstat -an 命令，我的解决方法是安装一个 nmap，然后扫描本地端口（弯道超车）：</p><h2 id="安装nmap端口扫描神器"><a href="#安装nmap端口扫描神器" class="headerlink" title="安装nmap端口扫描神器"></a>安装nmap端口扫描神器</h2><p>pkg install nmap</p><h2 id="扫描本地端口"><a href="#扫描本地端口" class="headerlink" title="扫描本地端口"></a>扫描本地端口</h2><p>nmap 127.0.0.1</p><p>使用 nmap 操作 纯属无奈之举，但是又不是不能用（源于：罗永浩名言 :-)）</p><p>进阶配置</p><p>要想使用体验好，进阶配置少不了。</p><h2 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h2><p>使用pkg update 更新一下的时候发现默认的官方源网速有点慢，在这个喧嚣浮躁的时代，我们难以静下心等待，这个时候就得更换成国内的Termux清华大学源了，加快软件包下载速度。</p><h3 id="方法一：自动替换（推荐）"><a href="#方法一：自动替换（推荐）" class="headerlink" title="方法一：自动替换（推荐）"></a>方法一：自动替换（推荐）</h3><p>可以使用如下命令自动替换官方源为 TUNA 镜像源</p><p>pkg update 卡住的话多按几次回车 不要傻乎乎的等</p><pre><code>sed -i &#39;s@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@&#39; $PREFIX/etc/apt/sources.listsed -i &#39;s@^\(deb.*games stable\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@&#39; $PREFIX/etc/apt/sources.list.d/game.listsed -i &#39;s@^\(deb.*science stable\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@&#39; $PREFIX/etc/apt/sources.list.d/science.listpkg update</code></pre><p>更换源几秒钟就可以执行完pkg update了，心里顿时乐开了花。</p><h3 id="方法二：手动修改"><a href="#方法二：手动修改" class="headerlink" title="方法二：手动修改"></a>方法二：手动修改</h3><p>请使用内置或安装在 Termux 里的文本编辑器，例如 vi &#x2F; vim &#x2F; nano 等直接编辑源文件，不要使用 RE 管理器等其他具有 ROOT 权限的外部 APP 来修改 Termux 的文件</p><p>编辑 $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list 修改为如下内容</p><pre><code> The termux repository mirror from TUNA:deb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main</code></pre><p>编辑 $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;science.list 修改为如下内容</p><pre><code>The termux repository mirror from TUNA:deb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable</code></pre><p>编辑 $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;game.list 修改为如下内容</p><pre><code>The termux repository mirror from TUNA:deb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable</code></pre><p>安装基础工具</p><p>更换源之后来赶紧来下载安装一些基本工具吧，这些工具基本上是 Linux 系统自带的，因为 Termux 为了体积不过大，默认是没有带这些工具的，执行下面的命令来安装:</p><pre><code>pkg updatepkg install vim curl wget git tree -y</code></pre><h2 id="终端配色方案"><a href="#终端配色方案" class="headerlink" title="终端配色方案"></a>终端配色方案</h2><p>脚本项目地址：<a href="https://github.com/Cabbagec/termux-ohmyzsh/">https://github.com/Cabbagec/termux-ohmyzsh/</a></p><p>该脚本主要使用了zsh来替代bash作为默认 shell，并且支持色彩和字体样式，同时也激活了外置存储，可以直接访问SD卡下的目录。主题默认为 agnoster，颜色样式默认为 Tango，字体默认为 Ubuntu。</p><p>执行下面这个命令确保已经安装好了 curl 命令</p><pre><code>sh -c &quot;$(curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh)&quot;  </code></pre><p>如果因为不可抗力的原因，出现port 443: Connection refused网络超时的情况，那么执行下面我迁移到国内的地址的命令即可：</p><pre><code>sh -c &quot;$(curl -fsSL https://html.sqlsec.com/termux-install.sh)&quot;  </code></pre><p>Android6.0 以上会弹框确认是否授权访问文件,点击始终允许授权后 Termux 可以方便的访问SD卡文件。</p><h3 id="手机-App-默认只能访问自己的数据，如果要访问手机的存储，需要请求权限，如果你刚刚不小心点了拒绝的话，那么可以执行以下命令来重新获取访问权限"><a href="#手机-App-默认只能访问自己的数据，如果要访问手机的存储，需要请求权限，如果你刚刚不小心点了拒绝的话，那么可以执行以下命令来重新获取访问权限" class="headerlink" title="手机 App 默认只能访问自己的数据，如果要访问手机的存储，需要请求权限，如果你刚刚不小心点了拒绝的话，那么可以执行以下命令来重新获取访问权限:"></a>手机 App 默认只能访问自己的数据，如果要访问手机的存储，需要请求权限，如果你刚刚不小心点了拒绝的话，那么可以执行以下命令来重新获取访问权限:</h3><pre><code>termux-setup-storage</code></pre><p>脚本允许后先后有如下两个选项:</p><h4 id="Enter-a-number-leave-blank-to-not-to-change-14"><a href="#Enter-a-number-leave-blank-to-not-to-change-14" class="headerlink" title="Enter a number, leave blank to not to change: 14"></a>Enter a number, leave blank to not to change: 14</h4><h4 id="Enter-a-number-leave-blank-to-not-to-change-6"><a href="#Enter-a-number-leave-blank-to-not-to-change-6" class="headerlink" title="Enter a number, leave blank to not to change: 6"></a>Enter a number, leave blank to not to change: 6</h4><p>分别选择色彩样式和字体样式，重启Termux app后生效配置。不满意刚刚的效果，想要继续更改配色方案的话，可以根据下面命令来更改对应的色彩配色方案：</p><p>设置色彩样式：</p><p>输入chcolor命令更换色彩样式，或者：输入</p><pre><code>~/.termux/colors.sh</code></pre><p>设置字体</p><p>运行chfont更换字体，或者：</p><pre><code>~/.termux/fonts.sh</code></pre><p>创建目录软连接</p><p>执行过上面的一键配置脚本后，并且授予 Termux 文件访问权限的话，会在家目录生成storage目录，并且生成若干目录，软连接都指向外置存储卡的相应目录:</p><p>创建QQ文件夹软连接</p><p>手机上一般经常使用手机QQ来接收文件,这里为了方便文件传输,直接在storage目录下创建软链接.</p><p>QQ</p><pre><code>ln -s /data/data/com.termux/files/home/storage/shared/tencent/QQfile_recv QQ</code></pre><p>TIM</p><pre><code>ln -s /data/data/com.termux/files/home/storage/shared/tencent/TIMfile_recv TIM</code></pre><p>这样可以直接在home目录下去访问QQ文件夹，大大提升了工作效率。</p><h2 id="定制常用按键"><a href="#定制常用按键" class="headerlink" title="定制常用按键"></a>定制常用按键</h2><p>在 Termux v0.66 的版本之后我们可以通过</p><pre><code>~/.termux/termux.properties</code></pre><p>文件来定制我们的常用功能按键，默认是不存在这个文件的，我们得自己配置创建一下这个文件。</p><p>下面做尝试简单配置一下这个文件:</p><h3 id="新建并编辑配置文件"><a href="#新建并编辑配置文件" class="headerlink" title="新建并编辑配置文件"></a>新建并编辑配置文件</h3><pre><code>vim ~/.termux/termux.properties</code></pre><p>内容为：</p><pre><code>extra-keys = [ \</code></pre><p> [‘ESC’,’|’,’&#x2F;‘,’HOME’,’UP’,’END’,’PGUP’,’DEL’], \</p><p> [‘TAB’,’CTRL’,’ALT’,’LEFT’,’DOWN’,’RIGHT’,’PGDN’,’BKSP’] \</p><p>]</p><p>如果无法创建这个文件，那么得首先新建一下这个目录:</p><pre><code>mkdir ~/.termux</code></pre><p>修改完成保存文件后，重启 Termux app生效配置：</p><p>可以直接输入特殊的字符串，例如上面的例子中的|就是一个字符串，此外 Termux 还有封装了一些特殊按键，入上面例子中的ESC就是 Termux 自带的按键，完整的特殊按键表如下：</p><pre><code>按键  说明CTR 特殊按键ALT 特殊按键FN  特殊按键ESC 退出键TAB 表格键HOME 原位键END 结尾键PGUP 上翻页键PGDN 下翻页键INS 插入键DEL 删除键BKSP 退格键UP  方向键 上LEFT 方向键 左RIGHT 方向键 右DOWN 方向键 下ENTER 回车键BACKSLASH 反斜杠 \QUOTE 双引号键APOSTROPHE 单引号键F1~F12 F1-F12按键</code></pre><p>上面列出的三个特殊键中的每一个最多只能在附加键定义中列出一次，超过次数将会报错。</p><p>下面是我自用的按键表：</p><pre><code> extra-keys = [ \</code></pre><p> [‘ESC’,’|’,’&#x2F;‘,’&#96;’,’UP’,’QUOTE’,’APOSTROPHE’], \</p><p> [‘TAB’,’CTRL’,’~’,’LEFT’,’DOWN’,’RIGHT’,’ENTER’] \</p><p>]</p><h2 id="zsh-主题配色"><a href="#zsh-主题配色" class="headerlink" title="zsh 主题配色"></a>zsh 主题配色</h2><p>编辑家目录下的.zshrc配置文件</p><p>   $ vim .zshrc</p><p>第一行可以看到,默认的主题是agnoster主题:</p><p>实际上这个主题也蛮酷的，如果你还想更换其他主题的话，那么在.oh-my-zsh&#x2F;themes目录下放着oh-my-zsh所有的主题配置文件，只要将默认的 agnoster 更换为其他的主题文件名即可。</p><p>下面是我认为还不错的几款主题</p><p>agnoster</p><p>ys</p><p>robbyrussell</p><p>主题比较多，这里就不列举了，感兴趣大家可以一个个尝试去看看。</p><p>当然如果你是个变态的话，可以尝试random 主题,每打开一个会话配色主题都是随机的.</p><pre><code>ZSH_THEME=&quot;random&quot;</code></pre><h3 id="zsh-插件推荐"><a href="#zsh-插件推荐" class="headerlink" title="zsh 插件推荐"></a>zsh 插件推荐</h3><p>zsh 之所以受欢迎除了好看的配色以为，另一个原因就是强大的插件了。下面列举一款比较实用的插件的安装方法，更多强大的插件等待大家自己去探索。</p><h4 id="autosuggestions"><a href="#autosuggestions" class="headerlink" title="autosuggestions"></a>autosuggestions</h4><p>根据用户的平时使用习惯，终端会自动提示接下来可能要输入的命令，这个实际使用效率还是比较高的：</p><h4 id="拷贝到-plugins-目录下"><a href="#拷贝到-plugins-目录下" class="headerlink" title="拷贝到 plugins 目录下"></a>拷贝到 plugins 目录下</h4><pre><code>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></pre><p>在 ~&#x2F;.zshrc 中配置：</p><pre><code>Iniplugins=(其他的插件 zsh-autosuggestions)</code></pre><p>输入zsh命令生效配置:</p><p>命令就自动提示补全了,在 Termux 里面的快捷键是 音量加 + D，就可以直接补全命令了。</p><h2 id="修改启动问候语"><a href="#修改启动问候语" class="headerlink" title="修改启动问候语"></a>修改启动问候语</h2><p>这个默认启动问候语在前期对于初学者有一定的帮助，但是随着你们 Termux 的熟悉，这个默认的问候语就会显得比较臃肿。编辑问候语文件可以直接修改启动显示的问候语:</p><pre><code>vim $PREFIX/etc/motd</code></pre><p>这样启动新的会话的时候看上去就会简洁很多。什么你也想要这个效果？ 呐 下面是我自己生成的，可以直接复制粘贴:</p><p>你可以直接复制这个：</p><pre><code>     _____                                    |_   _|__ _ __ _ __ ___  _   ___  __       | |/ _ \ &#39;__| &#39;_ ` _ \| | | \ \/ /       | |  __/ |  | | | | | | |_| |&gt;  &lt;       |_|\___|_|  |_| |_| |_|\__,_/_/\_\</code></pre><h2 id="超级管理员身份"><a href="#超级管理员身份" class="headerlink" title="超级管理员身份"></a>超级管理员身份</h2><p>实际上 Termux 不需要 root 权限也可以折腾各种各样的操作的，大家不必对 root 抱有啥幻想，本文的操作基本上没有涉及到手机要用到 root 的地步。</p><h3 id="手机没有root"><a href="#手机没有root" class="headerlink" title="手机没有root"></a>手机没有root</h3><p>利用proot可以为手机没有root的用户来模拟一个root的环境，这里主要是经典的 Linux 文件系统布局上的模拟。</p><pre><code>pkg install proot -y</code></pre><p>然后终端下面输入:</p><pre><code>termux-chroot</code></pre><p>即可模拟root环境，该环境模仿 Termux 中的常规Linux文件系统，但是不是真正的 root。</p><p>输入exit可回到普通用户的文件系统。</p><h3 id="手机已经root"><a href="#手机已经root" class="headerlink" title="手机已经root"></a>手机已经root</h3><p>安装tsu，这是一个su的 Termux 版本，是一个真正的root权限，用来在termux上替代su，操作不慎可能对手机有安全风险。因为官方封装了，所以安装也很简单：</p><pre><code>pkg install tsu -y</code></pre><p>然后终端下面输入:</p><pre><code>tsu</code></pre><p>即可切换root用户，这个时候会弹出root授权提示，给予其root权限，效果图如下:</p><p>在管理员身份下，输入exit可回到普通用户身份。不过本文没有设计到 root 权限的操作，一些底层的工具可能才会需要，考虑到 root 的不安全性 和 那些工具的冷门性，我这里就没有继续拓展。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>Termux 支持的开发环境很强，可以完美的运行 C、Python、Java、PHP、Ruby等开发环境，建议读者朋友们选择自己需要的开发环境折腾。</p><p>编辑器</p><p>写代码前总得折腾一下编辑器，毕竟磨刀不误砍柴工嘛。Termux 支持多种编辑器，完全可以满足日常使用需求。</p><h3 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h3><p>据说Emacs是神的编辑器，可我这种小菜鸡还不会使用哎，但是 Termux 官方已经封装好了 Emacs了，我们安装起来就会简单很多:</p><pre><code> pkg install emacs  </code></pre><h3 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h3><p>nano 是一个小而美的编辑器。具有如下：打开多个文件，每行滚动，撤消&#x2F;重做，语法着色，行编号等功能</p><p>同样安装起来也很简单：</p><pre><code>pkg install nano</code></pre><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>Vim 被称为编辑器之神，基本上 Linux 发行版都会自带 Vim，这个在前文基本工具已经安装了，如果你没有安装的话，可以使用如下命令安装：</p><pre><code>pkg install vim</code></pre><p>并且官方也已经封装了vim-python，对Python相关的优化。</p><pre><code>pkg install vim-python</code></pre><h3 id="解决汉字乱码"><a href="#解决汉字乱码" class="headerlink" title="解决汉字乱码"></a>解决汉字乱码</h3><p>如果你的Vim打开汉字出现乱码的话，那么在家目录(~)下,新建.vimrc文件</p><pre><code>vim .vimrc</code></pre><p>添加内容如下:</p><pre><code>set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1set enc=utf8set fencs=utf8,gbk,gb2312,gb18030</code></pre><p>然后source下变量:</p><pre><code>source .vimrc</code></pre><h3 id="Vim-配色"><a href="#Vim-配色" class="headerlink" title="Vim 配色"></a>Vim 配色</h3><p>Termux Vim 自带了如下的配色：</p><pre><code>ls /data/data/com.termux/files/usr/share/vim/vim82/colorsdesert.vim  morning.vim    shine.vim    blue.vim      elflord.vim  murphy.vim    slate.vim    darkblue.vimevening.vim  pablo.vim      industry.vim  peachpuff.vim  torte.vim    delek.vim    koehler.vim  ron.vim        zellner.vim</code></pre><p>配色可以自己一个个尝试一下，还是向上面的汉字乱码那样，编辑家目录下的.vimrc文件：</p><pre><code>vim ~/.vimrc</code></pre><p>新增如下内容：</p><pre><code>set nu                &quot; 显示行号colorscheme desert    &quot; 颜色主题syntax on             &quot; 打开语法高亮</code></pre><p>下面是我随便找的几个颜色主题效果，感兴趣的朋友可以自己一个个尝试：</p><p>&#x3D;&#x3D;&#x3D; slate &#x3D;&#x3D;&#x3D;</p><p>&#x3D;&#x3D;&#x3D; murphy&#x3D;&#x3D;&#x3D;</p><p>&#x3D;&#x3D;&#x3D; peachpuff &#x3D;&#x3D;&#x3D;</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>Apache是一个开源网页服务器软件，由于其跨平台和安全性，被广泛使用，是最流行的Web服务器软件之一。</p><p>安装 Apache</p><pre><code>pkg install apache2</code></pre><p>启动 Apache</p><pre><code>apachectl start</code></pre><p>然后浏览器访问: <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a> 访问是否成功启动：</p><p>Termux 自带的 Apache 的网站默认路径为：</p><pre><code>$PREFIX/share/apache2/default-site/htdocs/index.html</code></pre><p>停止 Apache</p><pre><code>apachectl stop</code></pre><p>重启 Apache</p><pre><code>apachectl restart</code></pre><h2 id="Apache-解析-PHP"><a href="#Apache-解析-PHP" class="headerlink" title="Apache 解析 PHP"></a>Apache 解析 PHP</h2><p>既然Apache、PHP、MySQL都成功安装的话，那么现在只要配置好 Apache 解析 PHP 之后就可以打造一个 Android 平台上的 LAMPP平台了。</p><h2 id="安装-php-apache"><a href="#安装-php-apache" class="headerlink" title="安装 php-apache"></a>安装 php-apache</h2><p>默认的 Apache 是无法解析 PHP的，我们需要安装相应的包：</p><pre><code>pkg install php-apache</code></pre><h3 id="配置-Apache"><a href="#配置-Apache" class="headerlink" title="配置 Apache"></a>配置 Apache</h3><p>Termux 上的 Apache 默认配置文件的路径为:</p><pre><code>$PREFIX/etc/apache2/httpd.conf</code></pre><p>直接编辑配置文件:</p><pre><code>vim /data/data/com.termux/files/usr/etc/apache2/httpd.conf</code></pre><p>配置文件里面搜索 PHP 没有相关的模块，所以需要我们手动添加 PHP7 的模块:</p><pre><code>LoadModule php7_module /data/data/com.termux/files/usr/libexec/apache2/libphp7.so</code></pre><p>并在刚刚这个语句下方添加解析器，内容如下:</p><pre><code>&lt;FilesMatch \.php$&gt;  SetHandler application/x-httpd-php&lt;/FilesMatch&gt;</code></pre><p>接着继续往下找配置文件里面配置默认首页的地方，我们添加 index.php 到默认首页的规则里面:</p><pre><code>&lt;IfModule dir_module&gt;  DirectoryIndex index.php index.html&lt;/IfModule&gt;</code></pre><p>这表示网站目录的默认首页是 index.php，如果没有 index.php 系统会自动寻找 index.html做为默认首页了。</p><p>修改完 Apache 的配置文件后，记得使用 apachectl restart 重启 Apache 服务，然后这个时候回发现我们重启居然报错了：</p><pre><code>Apache is running a threaded MPM, but your PHP Module is not compiled to be threadsafe.  You need to recompile PHP.AH00013: Pre-configuration failed</code></pre><p>不要慌问题不大，下面来解决这个问题</p><p>解决 Apache PHP 报错</p><p>先找到如下行</p><pre><code>LoadModule mpm_worker_module libexec/apache2/mod_mpm_worker.so</code></pre><p>给他注释掉为:</p><pre><code>#LoadModule mpm_worker_module libexec/apache2/mod_mpm_worker.so</code></pre><p>然后找到如下行:</p><pre><code>#LoadModule mpm_prefork_module libexec/apache2/mod_mpm_prefork.so</code></pre><p>取消注释为:</p><pre><code>LoadModule mpm_prefork_module libexec/apache2/mod_mpm_prefork.so</code></pre><p>就OK了</p><h2 id="解析-PHP-测试"><a href="#解析-PHP-测试" class="headerlink" title="解析 PHP 测试"></a>解析 PHP 测试</h2><p>在 Apache 的网站根目录下，创建一个 index.php ，测试一下 phpinfo() 函数能否正常运行:</p><pre><code>echo &#39;&lt;?php phpinfo(); ?&gt;&#39; &gt; $PREFIX/share/apache2/default-site/htdocs/index.php</code></pre><p>然后浏览访问: <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a> 查看效果</p><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>Termux 官方封装了 Clang，他是一个C、C++、Objective-C和Objective-C++编程语言的编译器前端。</p><h3 id="安装-clang"><a href="#安装-clang" class="headerlink" title="安装 clang"></a>安装 clang</h3><pre><code>pkg install clang</code></pre><p>编译测试</p><p>clang 在编译这一块很强大，感兴趣的朋友可以去网上查看详细的教程，这里只演示基本的 Hello World使用。写一个Hello World的C程序，如下 hello.c:</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;  printf(&quot;Hello World&quot;)  return 0;&#125;</code></pre><p>编辑完成后，使用 clang 来编译生成 hello 的可执行文件：</p><pre><code>clang hello.c -o hello</code></pre><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>Termux 原生编译JAVA只能使用 ecj (Eclipse Compiler for Java) 和 dx 了，然后使用 Android 自带的 dalvikvm 运行。如果想要完整体验JAVA环境的话，另一个方法就是 Termux 里面安装一个完整的 Linux 系统，然后在 Linux里面运行Java，安装系统部分下面文章会详细介绍，这一节我只介绍最基本的操作。</p><p>安装编译工具</p><pre><code>pkg install ecj dx -y</code></pre><p>这里只演示基本的 Hello World 使用。写一个Hello World的 JAVA 程序，如下 HelloWorld.java:</p><pre><code>public class HelloWorld &#123;    public static void main(String[] args)&#123;        System.out.println(&quot;Hello Termux&quot;);    &#125;&#125;</code></pre><p>编译生成 class 文件</p><pre><code>ecj HelloWorld.java</code></pre><p>编译生成 dex 文件</p><pre><code>dx --dex --output=hello.dex HelloWorld.class</code></pre><p>使用 dalvikvm 运行</p><p>格式规范如下：</p><pre><code>dalvikvm -cp dex文件名 类名dalvikvm -cp hello.dex HelloWorld</code></pre><h2 id="MariaDB-MySQL"><a href="#MariaDB-MySQL" class="headerlink" title="MariaDB(MySQL)"></a>MariaDB(MySQL)</h2><p>MariaDB 是 MySQL 关系数据库管理系统的一个复刻，由社区开发，有商业支持，旨在继续保持在GNU GPL下开源。开发这个分支的原因之一是：甲骨文公司收购了 MySQL 后，有将 MySQL 闭源的潜在风险，因此社区采用分支的方式来避开这个风险。</p><p>安装 MariaDB</p><p>Termux 官方也封装了MariaDB，所以安全起来很方便：</p><pre><code>pkg install mariadb</code></pre><p>这里基本上会安装很顺利，但是早期用户可能出现安装失败的情况，如果安装失败的话，这个时候手动在配置目录下创建my.cnf.d文件夹即可：</p><pre><code>$ cd /data/data/com.termux/files/usr/etc/$ mkdir my.cnf.d</code></pre><p>初始化数据库</p><p>早期的 Termux 安装完 MySQL是需要初始化数据库的，新版本在安装时候就已经初始化了数据库</p><pre><code>mysql_install_db</code></pre><p>2020年4月19日：今天安装的MySQL 发现已经存在 mysql.user 表了，无需初始化：</p><p>启动 MySQL 服务</p><p>因为正常启动完成后，MySQL这个会话就一直存活，类似与debug调试一样，此时使用Ctrl + C -&gt; 中止当前进程也无济于事，体验式就一点都不优雅，所以这里使用Linux自带的nohup命令将其放到后台启动。</p><pre><code>nohup mysqld &amp;</code></pre><p>图片上这个17115此时就是mysqld的进程PID号，我们使用如下命令验证一下是否正确：</p><pre><code>ps aux|grep mysql</code></pre><p>可以看到果然是进程的PID号</p><p>至于 nohup 运行的提示</p><pre><code>nohup: ignoring input and appending output to `nohup.out&#39;</code></pre><p>这个是正常现象，无伤大雅，Termux 下就这样将就着用吧。</p><p>停止 MySQL 服务</p><p>Termux 下没有好的办法退出 MySQL 服务，只能强制杀掉进程了，使用如下命令格式可以轻松杀掉进程：</p><pre><code>kill -9 PID</code></pre><p>成功kill掉</p><p>当然每次查看进程的PID号，再杀掉进程有点繁琐了，实际上这一步可以直接这样操作：</p><pre><code>kill -9 `pgrep mysql`</code></pre><p>Awesome ! 优雅!</p><h2 id="默认的两个用户"><a href="#默认的两个用户" class="headerlink" title="默认的两个用户"></a>默认的两个用户</h2><p>用户登录的前提是MySQL服务在后台运行，如果你按照上一小节操作把MySQL kill掉的话，请重新启动一下MySQL服务</p><p>新版本的 Termux 安装初始化数据库的时候包含两个高权限用户，一个是无法访问的 root 用户</p><p>提示拒绝root登录</p><p>另一个用户就是 Termux 的用户名，默认密码为空，我们来登录看看：</p><pre><code>mysql -u $(whoami)</code></pre><p>可以成功登录 并执行SQL语句</p><p>那么这个无法登录的 root 用户该怎么办呢 ？不要着急 继续往下看</p><p>修改 root 密码</p><p>老版本的 Termux 的直接使用mysql_secure_installation可以设置密码，但是新版本的安全策略变更了 我们在设置密码的时候回提示当前密码不正确，所以这条路行不通了。</p><p>这里我们只能使用MySQL的另一个用户名，即 Termux 用户名登录，然后来修改 root 的密码，使用如下命令修改 root 密码:</p><pre><code># 登录 Termux 用户mysql -u $(whoami)# 修改 root 密码的 SQL语句 use mysql;set password for &#39;root&#39;@&#39;localhost&#39; = password(&#39;你设置的密码&#39;);# 刷新权限 并退出flush privileges;quit;</code></pre><p>OK！那么修改 root 密码就成功了。</p><h2 id="root-用户登录"><a href="#root-用户登录" class="headerlink" title="root 用户登录"></a>root 用户登录</h2><p>修改完密码之后我们就可以美滋滋地使用 root 用户来登录了：</p><pre><code>mysql -u root -pEnter password: xxxxx（这里输入你的密码)</code></pre><h3 id="远程登录-MySQL"><a href="#远程登录-MySQL" class="headerlink" title="远程登录 MySQL"></a>远程登录 MySQL</h3><p>使用 ip a 后查看 IP 地址后，尝试电脑端远程访问 Termux 的数据库:</p><p>发现默认是无法成功连接的，这个时候我们需要到数据库手动开启 root 用户的远程访问权限:</p><p>这里的 P@ssw0rd 是我的 root 密码</p><pre><code>grant all on *.* to root@&#39;%&#39; identified by &#39;P@ssw0rd&#39; with grant option;flush privileges;</code></pre><p>执行完成后 尝试PC端远程过去看看:</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx 是一个高性能的 Web 和反向代理服务器，Nginx 用的熟悉的话，下面搭建各种网站也就轻而易举了。</p><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>Termux 安装 Nginx 也很简单，一条命令即可：</p><pre><code>pkg install nginx</code></pre><p>安装完成后，我的习惯是查看一下版本信息：</p><h4 id="1-17-10-版本"><a href="#1-17-10-版本" class="headerlink" title="1.17.10 版本"></a>1.17.10 版本</h4><h3 id="测试-Nginx"><a href="#测试-Nginx" class="headerlink" title="测试 Nginx"></a>测试 Nginx</h3><p>测试检查 Nginx 的配置文件是否正常:</p><pre><code>nginx -t</code></pre><p>现在测试肯定是OK的，这个多用于我们修改完 Nginx 的配置文件后的检查。</p><h3 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h3><p>早期版本的 Termux 需要在termux-chroot 环境下才可以成功启动 Nginx ，新版本的 Termux 可以直接启动，很是方便：</p><pre><code>nginx</code></pre><p>Termux 在 Nginx 上默认运行的端口号是 8080， 使用pgrep命令也可以查看 Nginx 进程相关的PID号。</p><p>然后手机本地直接访问<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a> 查看 Nginx 是否正常启动：</p><h3 id="重启-Nginx"><a href="#重启-Nginx" class="headerlink" title="重启 Nginx"></a>重启 Nginx</h3><p>一般当修改完 Nginx 相关的配置文件时，我们需要重启 Nginx，使用如下命令即可重启:</p><pre><code>nginx -s reload</code></pre><h3 id="停止-Nginx"><a href="#停止-Nginx" class="headerlink" title="停止 Nginx"></a>停止 Nginx</h3><p>方法一 原生停止</p><pre><code>nginx -s stop</code></pre><p>或者</p><pre><code>nginx -s quit</code></pre><p>quit 是一个优雅的关闭方式，Nginx在退出前完成已经接受的连接请求。Stop 是快速关闭，不管有没有正在处理的请求。</p><p>方法二 杀掉进程</p><p>只需三番钟，里造会干我一样，爱象节款游戏  扯远了，只需要1条命令，即可优雅的终止掉 Nginx 服务:</p><pre><code>kill -9 `pgrep nginx`</code></pre><p>貌似手机党 并不好敲 这个 &#96; 符号 &#x3D;，&#x3D; ，如果实在敲不出来，那就分两步走吧：</p><h3 id="查询-nginx-进程相关的-PID-号"><a href="#查询-nginx-进程相关的-PID-号" class="headerlink" title="查询 nginx 进程相关的 PID 号"></a>查询 nginx 进程相关的 PID 号</h3><pre><code>pgrep nginx</code></pre><h3 id="杀掉-查询出的-PID号进程"><a href="#杀掉-查询出的-PID号进程" class="headerlink" title="杀掉 查询出的 PID号进程"></a>杀掉 查询出的 PID号进程</h3><pre><code>kill -9 PID</code></pre><h3 id="Nginx-解析-PHP"><a href="#Nginx-解析-PHP" class="headerlink" title="Nginx 解析 PHP"></a>Nginx 解析 PHP</h3><p>Termux 下的 Nginx 解析 PHP 这里单独拿出一级标题来叙述，成功解析的话,下面安装 wordpress等 PHP网站就会轻松很多。</p><p>安装 php-fpm</p><p>Nginx 本身不能处理 PHP，它只是个 Web 服务器，当接收到 PHP 请求后发给 PHP 解释器处理。Nginx 一般是把请求转发给 fastcgi 管理进程处理，PHP-FPM 是一个PHP FastCGI管理器，所以这里得先安装它：</p><pre><code>pkg install php-fpm</code></pre><p>安装完成顺便检查一下版本信息吧</p><h3 id="配置-php-fpm"><a href="#配置-php-fpm" class="headerlink" title="配置 php-fpm"></a>配置 php-fpm</h3><p>编辑 php-fpm 的配置文件 <a href="http://www.conf/">www.conf</a>:</p><pre><code>vim $PREFIX/etc/php-fpm.d/www.conf</code></pre><p>定位搜索 listen &#x3D; 找到</p><pre><code>listen = /data/data/com.termux/files/usr/var/run/php-fpm.sock</code></pre><p>将其改为：</p><pre><code>listen = 127.0.0.1:9000</code></pre><p>？？？啥 你不会使用 vim 搜索 ㄟ(▔,▔)ㄏ 那就老老实实一个个翻页吧。</p><h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p>编辑 Nginx 的配置文件 nginx.conf:</p><pre><code>vim $PREFIX/etc/nginx/nginx.conf</code></pre><p>下面是我贴出配置好的完整配置文件，大家可以参考下面这些图，只需要2大步骤：</p><pre><code>添加 index.php 到默认首页的规则里面取消 location ~ \.php$ 这些注释，按照图片上的 提示修改：Termux 里面的 Nginx 默认网站的根目为：/data/data/com.termux/files/usr/share/nginx/html如果想要修改默认路径的话 只需要在配置文件中 替换2处出现的这个路径即可</code></pre><p>下面贴一份完整的配置文件：</p><pre><code>Nginxworker_processes  1;events &#123;    worker_connections  1024;&#125;http &#123;    include       mime.types;    default_type  application/octet-stream;    sendfile        on;    keepalive_timeout  65;    server &#123;        listen       8080;        server_name  localhost;        location / &#123;            root   /data/data/com.termux/files/usr/share/nginx/html;            index  index.html index.htm index.php;        &#125;        error_page   500 502 503 504  /50x.html;        location = /50x.html &#123;            root   /data/data/com.termux/files/usr/share/nginx/html;        &#125;        location ~ \.php$ &#123;            root           html;            fastcgi_pass   127.0.0.1:9000;            fastcgi_index  index.php;            fastcgi_param  SCRIPT_FILENAME  /data/data/com.termux/files/usr/share/nginx/html$fastcgi_script_name;            include        fastcgi_params;        &#125;    &#125;&#125;</code></pre><h3 id="测试-PHP-解析"><a href="#测试-PHP-解析" class="headerlink" title="测试 PHP 解析"></a>测试 PHP 解析</h3><p>Nginx 默认网站的根目录为：</p><pre><code>/data/data/com.termux/files/usr/share/nginx/html</code></pre><p>在这个网站根目录下新建 info.php 内容为：</p><pre><code>&lt;?php phpinfo(); ?&gt;echo &#39;&lt;?php phpinfo(); ?&gt;&#39; &gt; $PREFIX/share/nginx/html/info.php</code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>先启动 php-fpm 服务：</p><pre><code>php-fpm</code></pre><p>然后再启动 Nginx 服务</p><pre><code>nginx</code></pre><p>如果你的 Nginx 已经启动了的话，使用</p><pre><code>nginx -s reload 重启 Nginx</code></pre><p>访问测试</p><p>浏览器访问<a href="http://127.0.0.1:8080/info.php">http://127.0.0.1:8080/info.php</a> 来看看刚刚新建的测试文件是否解析了：</p><p>哇哦~ok</p><h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h2><p>Node.js 是能够在服务器端运行 JavaScript 的开放源代码、跨平台 JavaScript 运行环境。</p><h3 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h3><p>nodejs-lts 是长期支持版本，如果执行 pkg install nodejs 版本后，发现 npm 报如下错误:</p><pre><code>segmentation fault</code></pre><p>那么这个时候可以尝试卸载当前版本</p><pre><code>pkg uninstall nodejs</code></pre><p>然后执行下面命令安装长期稳定版本:</p><pre><code>pkg install nodejs-lts</code></pre><p>安装完成后使用如下命令查看版本信息：</p><pre><code>node -Vnpm -V</code></pre><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>新建一个 hello.js 脚本，内容如下:</p><pre><code>console.log(&#39;Hello Termux&#39;);</code></pre><p>然后尝试运行:</p><pre><code>$ node hello.jsHello Termux</code></pre><h2 id="http-server"><a href="#http-server" class="headerlink" title="http-server"></a>http-server</h2><p>http-server 是一个基于 Node.js 的简单零配置命令行HTTP服务器。</p><pre><code># 安装 http-servernpm install -g http-server# 运行 http-serverhttp-server</code></pre><p>尝试电脑端浏览器直接访问看看:</p><p>OK</p><h3 id="安装报错"><a href="#安装报错" class="headerlink" title="安装报错"></a>安装报错</h3><p>早期版本的 Termux 的 npm 安装一些包的时候会报如下错误：</p><pre><code>Cannot read property &#39;length&#39; of undefined</code></pre><p>查了下是这边版本的问题</p><p>新版本貌似npm正常</p><p>这是一个BUG，官方的解决方法如下：</p><pre><code>disable concurrency in case of libuv/libuv#1459</code></pre><p>编辑如下文件：</p><pre><code>vim $PREFIX/lib/node_modules/npm/node_modules/worker-farm/lib/farm.js</code></pre><p>我这里修改length的是4，这个好像和CPU有关，总之这里的 length 得指定一个数字。</p><p>新版本貌似npm正常</p><p>然后在重新安装下</p><pre><code>npm install hexo-cli -g</code></pre><p>成功。</p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>PHP 是一种开源的脚本语言，适用于网络开发。语法借鉴吸收C语言、Java 和 Perl 等流行计算机语言的特点，易于学习，PHP 是世界上最好的语言（手动狗头）。</p><h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><p>Termux 官方封装了 PHP，所以我们安装起来就很方便：</p><pre><code>pkg install php</code></pre><p>安装完成后查看下版本信息：</p><pre><code>php --version</code></pre><p>运行测试文件</p><p>自 PHP5.4 之后 PHP内置了一个 Web 服务器。在 Termux 下可以很方便地测试 PHP 文件</p><p>首先在家(~)目录下建一个www 文件夹，然后在www文件夹下新建一个index.php文件，内容为：</p><pre><code>&lt;?php phpinfo();?&gt;</code></pre><p>完整的步骤如下:</p><pre><code># 新建 www 文件夹mkdir ~/www# 创建 inedx.php 文件echo &#39;&lt;?php phpinfo();?&gt;&#39; &gt; ~/www/index.php</code></pre><p>编写完成index.php文件后，尝试使用 PHP 内置的 WebServer 直接启动:</p><pre><code># 进入家目录cd ~# 启动 WebServerphp -S 0.0.0.0:8888 -t www/</code></pre><p>自己制定端口后，浏览器访问<a href="http://127.0.0.1:8888效果如下：">http://127.0.0.1:8888效果如下：</a></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Python是近几年非常流行的语言，Python 相关的书籍和资料也如雨后春笋一般不断涌现，带来了活跃了 Python 学习氛围。</p><h3 id="安装python2"><a href="#安装python2" class="headerlink" title="安装python2"></a>安装python2</h3><p>Python2 版本要淘汰了，大家简单了解一下就好：</p><pre><code>pkg install python2 -y</code></pre><p>安装完成后，使用python2命令启动 Python2.7 的环境</p><h3 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h3><p>Termux 安装 Python 默认版本是 Python3 的版本，与此同时也顺便安装了clang</p><pre><code>pkg install python -y</code></pre><p>安装完成后，查看下clang和Python的版本</p><p>注意版本区分</p><p>如果你同时安装了 Python3 和 Python2 版本的话，最好验证一下各个版本情况，做到心知肚明，我是先安装 Python3 然后再安装 Python2的</p><p>升级pip版本</p><p>pip 保持最新是一个好习惯，升级方式很简单：</p><pre><code># 升级 pip2python2 -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</code></pre><h3 id="升级-pip3"><a href="#升级-pip3" class="headerlink" title="升级 pip3"></a>升级 pip3</h3><pre><code>python -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</code></pre><p>这两条命令分别升级了pip2和pip3到最新版。升级完成后你会惊讶的发现你的pip3命令不见了？？？然后这个时候就开始吐槽我了（内心OS：我 非要强迫症升级 pip 版本，这下好了吧！）</p><p>不要慌 问题不大，我们可以手动查看当前有哪些可执行的 pip 文件，使用如下命令：</p><pre><code>ls /data/data/com.termux/files/usr/bin|grep pip</code></pre><p>原来我们的pip3变成了pip3.8了啊</p><p>接下来分别查看对应 pip 可执行文件的版本</p><p>现在全都是最新版的 pip 了哦</p><h2 id="iPython"><a href="#iPython" class="headerlink" title="iPython"></a>iPython</h2><p>iPython是一个 Python 的增强版本的交互式 shell，支持变量自动补全，自动缩进，支持shell命令等，内置了许多很有用的功能和函数。iPython 可以提高我们的学习效率！</p><p>先安装clang,否则直接使用pip安装ipython会失败报错. 没有安装的话使用 pkg install clang安装</p><pre><code># -i 手动指定国内清华 pip 源 提高下载速度pip install ipython -i https://pypi.tuna.tsinghua.edu.cn/simple some-packagepip3.8 install ipython -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</code></pre><p>执行完上述命令分别安装好对应版本的iPython后，然后分别查看对应版本信息：</p><pre><code>ipython2 -Vipython -V</code></pre><h2 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h2><p>Jupyter Notebook（此前被称为 iPython notebook）可以在 Web 端提供Python交互，虽然和iPython共享同一个内核，但是更强大。</p><p>Jupyter notebook 相关的依赖比较多 安装起来较为耗时 我就只用 Python3 版本来演示了，另外请务必要使用国内的 pip 源来安装</p><p>下面官方建议安装的完整的命令：</p><pre><code>pkg updatepkg install proottermux-chrootapt install git clangapt install pkg-configapt install python python3-devapt install libclang libclang-devapt install libzmq libzmq-devapt install ipythonpip install jupyter</code></pre><p>如果你一步步跟着本文安装顺序操作的话，发现很多工具我们都安装过了(我真的有先见之明…)，那么直接参考如下命令安装即可:</p><pre><code># -i 手动指定国内中清华 pip 源 提高下载速度# 更新是个好习惯pkg update# 切换模拟的 root 环境termux-chroot# 安装相关依赖pkg install libclang# 安装 jupyterpip3 install jupyter -i https://pypi.tuna.tsinghua.edu.cn/simple some-package# 安装完成退出 chrootexit# 安装 jupyterlabpip3 install jupyterlab -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</code></pre><p>安装好之后查看一下版本信息：</p><pre><code>jupyter --version</code></pre><p>所有插件均安装完成</p><p>Jupyter Notebook就安装好了，这个比较强大更详细的教程大家可以自行去谷歌或者百度一下，我这里只演示基本的功能。</p><p>先启动 notebook</p><pre><code>jupyter notebook</code></pre><p>然后会看到运行的日志，我们复制出提示的URL</p><p>复制出的这个URL地址 在浏览器中打开</p><p>就成功运行了，那我们按照提示走个形式，输出个 Hello World就跑路：</p><p>OK 运行成功，那么回到 Termux 里面使用组合键 Ctrl + C -&gt; 中止当前的 Jupyter 进程</p><h1 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h1><p>网站搭建这一块实际上原理是大同小异的，我这里只写几个网站的安装方法，给大家提供一个思路。</p><h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><p>DVWA 是一个用来搞 Web 安全从业者入门使用的一个练习靶场，用来学习掌握基本的漏洞原理使用的，如果你对 Web 安全不感兴趣的话可以直接跳过这一个小节。</p><p>这里建议 DVWA 练习的时候 要结合源码去分析漏洞 不要直接把网上攻击流程走一步就草草了之了 不看源码的学习 等于啥都没有学</p><p>环境准备</p><p>因为 DVWA 靶场是 PHP编写的，所以你需要 提前配置好 Nginx 、PHP 以及 数据库，关于这方面配置可以参考前面开发环境下分类的「Nginx」、「MariaDB(MySQL)」和 「Nginx 解析 PHP」章节</p><p>下载 DVWA</p><pre><code>wget https://github.com/ethicalhack3r/DVWA/archive/master.zip</code></pre><p>如果访问 Github 比较慢的话，可以尝试如下链接:</p><pre><code>wget https://hub.fastgit.org/ethicalhack3r/DVWA/archive/master.zip</code></pre><p>解压到 Nginx 目录下</p><pre><code># 解压unzip master.zip -d $PREFIX/share/nginx/html/# 重命名cd $PREFIX/share/nginx/html/mv DVWA-master dvwa</code></pre><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><pre><code>mysql -uroot -p*** -e&quot;create database dvwa;show databases;&quot;*** 这里是mysql的密码</code></pre><p>可以看到 dvwa 数据库已经新建成功了。</p><h3 id="编辑-DVWA-配置文件"><a href="#编辑-DVWA-配置文件" class="headerlink" title="编辑 DVWA 配置文件"></a>编辑 DVWA 配置文件</h3><pre><code># 将配置文件 还原为 PHP 后缀cd $PREFIX/share/nginx/html/dvwa/configmv config.inc.php.dist config.inc.php# 编辑配置文件vim mv config.inc.php.dist config.inc.php</code></pre><p>初次访问测试网站</p><p>按照上述配置好 DVWA 之后，浏览器访问: <a href="http://192.168.31.124:8080/dvwa/setup.php">http://192.168.31.124:8080/dvwa/setup.php</a></p><p>可以看到 allow_url_include 运行 URL 远程包含没有开启，我们得手动开启一下:</p><p>实际上正常人是不会去开启这个的，十分危险，但是 DVWA 是一个靶场，有些漏洞实际上就是利用 PHP 配置不当造成的，这样才让新手有攻击下来的信心。</p><h3 id="配置-php-ini"><a href="#配置-php-ini" class="headerlink" title="配置 php.ini"></a>配置 php.ini</h3><p>Termux 下默认是没有 php.ini 文件的，不信我们手动来查找一下:</p><pre><code>php --iniConfiguration File (php.ini) Path: /data/data/com.termux/files/usr/libLoaded Configuration File:         (none)Scan for additional .ini files in: (none)Additional .ini files parsed:      (none)</code></pre><p>发现 php.ini 的文件应该存放在:</p><pre><code>/data/data/com.termux/files/usr/lib 目录下，但是 PHP 没有找到配置文件，所以需要我们手动在这个目录下新建 php.ini 配置文件:echo &#39;allow_url_include = On&#39; &gt; $PREFIX/lib/php.ini</code></pre><p>注意这是一个不安全的配置 只是为了配合本地的 DVWA 靶场 做模拟黑客攻击练习使用的</p><p>配置完成后，自己尝试使用php –ini来定位搜索配置文件，会发现 PHP 已经找到了配置文件了。</p><p>修改完配置文件后 得重启 php-fpm 服务:</p><pre><code># 杀掉 php-fpm 相关的进程kill -9 `pgrep fpm`# 再次启动 php-fpmphp-fpm</code></pre><p>再次访问测试网站:</p><p>浏览器访问: <a href="http://192.168.31.124:8080/dvwa/setup.php">http://192.168.31.124:8080/dvwa/setup.php</a></p><p>可以看到刚刚的配置文件生效了，现在安全检查全部通过</p><p>既然 安全检查通过的话，那么就直接页面滚动到最下面直接点击 Create&#x2F;Reset Database初始化数据库按钮即可，初始化成功后会自动跳转到登录界面。</p><p>DVWA 默认的用户有5个，用户名密码如下：</p><pre><code>用户名 密码admin   passwordgordonb abc1231337    charleypablo   letmeinsmithy  password</code></pre><p>登录成功!!!!</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 是一个用 Nodejs 编写的快速、简洁且高效的博客框架。Hexo 使用 Markdown 解析文章，在几秒内，即可利用靓丽的主题生成静态网页。另外大家看到我的博客就是使用 Hexo 搭建的哦。</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>Hexo 是用 Nodejs 编写的，所以安装的话得使用 npm 命令来安装：</p><pre><code>npm install hexo-cli -g</code></pre><p>安装完成的话，顺便看一下 Hexo 相关的版本信息吧：</p><pre><code>hexo -v</code></pre><h3 id="Hexo-基本部署"><a href="#Hexo-基本部署" class="headerlink" title="Hexo 基本部署"></a>Hexo 基本部署</h3><p>我们建立一个目录，然后到这个目录下初始化Hexo 环境</p><pre><code># 手动创建一个目录mkdir hexo  # 进入目录下并初始化Hexo环境cd hexo  hexo init  #生成静态文件 启动Hexohexo ghexo s      </code></pre><p>然后就跑起来一个最基本的 Hexo 博客，关于 Hexo 博客的详细教程，建议搭建去参考Hexo官方文档，我这里重点在于 Termux 其他的不作过多的叙述.</p><p>使用浏览器访问: <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000</a> 即可看到 Hexo（ymal的语法特别严格，一点小失误就会报错，要仔细哦）</p><h2 id="Hexo-部署到-Nginx"><a href="#Hexo-部署到-Nginx" class="headerlink" title="Hexo 部署到 Nginx"></a>Hexo 部署到 Nginx</h2><p>Hexo 是纯静态博客，官方默认把 Hexo 搭建在 Github Pages 仅仅是把 Hexo 根目录的 public 文件夹即 Hexo 生成的纯 HTML 源码部署到上面而已。所以知道这样原理 我们就可以轻而易举地将 Hexo 部署到 Nginx 下面。</p><p>生成 HTML 纯静态源码</p><pre><code>hexo g</code></pre><p>可以看到 Hexo 的根目录下 已经生成了 public 文件夹了</p><p>拷贝源码搭到 Nginx</p><p>现在我们只需要将 public 的文件夹里面的源码 全部拷贝到 Nginx 的网站根目录下：</p><pre><code># 在 nginx 根目录下新建 hexo 文件夹mkdir $PREFIX/share/nginx/html/hexo# 拷贝 源码到 nginx 下cp -rf public/* $PREFIX/share/nginx/html/hexo</code></pre><p>访问效果查看</p><p>浏览器访问:<a href="http://127.0.0.1:8080/hexo/">http://127.0.0.1:8080/hexo/</a> 即可看到效果</p><p>当然这里网站的CSS等样式没有加载出来，这个原因是 Hexo 对网站目录下部署并不友好 ，大概有如下解决方法：</p><p>Nginx vhosts 配置多域名，这个服务器上常用的操作，但是 Termux 里面实现难度较高</p><p>将 Hexo 的源码 直接拷贝到 Nginx 的根目录下，不用拷贝到 html&#x2F;hexo 目录下了，然后直接访问 <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a> 即可看到效果</p><p>这里就只是说一下这个思路，因为强迫症的我 不能忍受 Nginx 根目录的文件 乱七八糟 &#x3D;，&#x3D; 大家想尝试的话 按照我这个思路去尝试就可以了</p><h2 id="knifefire还会持续更新文章的啦"><a href="#knifefire还会持续更新文章的啦" class="headerlink" title="knifefire还会持续更新文章的啦"></a>knifefire还会持续更新文章的啦</h2><p>©knifefire &amp; ZH</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信自动健康打卡</title>
      <link href="/2022/09/14/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/"/>
      <url>/2022/09/14/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="自动健康打卡"><a href="#自动健康打卡" class="headerlink" title="自动健康打卡"></a>自动健康打卡</h1><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><ol><li>1.post填表—网络编程技术</li><li>2.fiddler抓包技术</li><li>3.云函数—–定时执行函数(代码)</li></ol><h4 id="post"><a href="#post" class="headerlink" title="post"></a>post</h4><p>一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取&#x2F;查询资源信息，而POST一般用于更新资源信息。</p><h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><p>要实现对App的网络数据抓包，需要监控App与服务器交互之间的网络节点，监控其中任意一个网络节点（网卡），获取所有经过网卡中的数据，对这些数据按照网络协议进行解析，这就是抓包的基本原理。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>校园健康打卡 就相当于更新, 所以用post 发送<br>而post发送什么呢?<br>这里就需要我们抓包,看看抓取的包 它干了什么,然后我们模拟一个环境,发送post 就实现了校园健康打卡.</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h2 id="抓包-1"><a href="#抓包-1" class="headerlink" title="抓包"></a>抓包</h2><p><a href="http://www.winwin7.com/soft/13111.html">点我进行fiddler下载</a></p><h3 id="fiddler配置"><a href="#fiddler配置" class="headerlink" title="fiddler配置"></a>fiddler配置</h3><p>点击选项<br><img src="/img/2.png"><br>然后设置成我这样<br><img src="/img/1.png"><br><img src="/img/3.png"><br>配置就欧克了</p><h3 id="手机连接fiddler"><a href="#手机连接fiddler" class="headerlink" title="手机连接fiddler"></a>手机连接fiddler</h3><p> 最好是手机开热点，也可以都连接一个wifi。<br> 然后查看自己电脑的IP，可以在CMD中输入ipconfig，那个无线局域网下的ipv4地址就是你的ip地址</p><h3 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h3><p>在游览器输入你刚才查看的ip:8888<br>点击下载并安装证书就OK了</p><h3 id="抓取数据"><a href="#抓取数据" class="headerlink" title="抓取数据"></a>抓取数据</h3><p>先将fiddler数据清空：<br><img src="/img/5.png"></p><p>再点击手机上的打卡<br>打卡完毕后,fidder上已经有数据了 ,双击点开<br><img src="/img/4.png"><br><img src="/img/10.png"><br>这里就是个人信息啦 你也看到36.5的温度了<br>这时我们点击表头:<br><img src="/img/6.png"><br>再复制所有标头<br>到一个文本里面<br>找到 cookie &#x3D; 后面的内容<br>把后面的内容复制过来  这就是你的登入信息  cookie  当然  每个人的都不一样!<br>再把文本视图的内容全部复制下来,这里面包含你的温度,位置<br><img src="/img/7.png"><br>到这里数据获取全部完毕.</p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>这里我最开始是用Java 写的,因为其他没学过! 后面因为云函数的原因 看了一下python<br>这里附上代码 </p><h4 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h4><pre><code>import java.io.UnsupportedEncodingException;import java.util.Random;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;public class Util &#123;private Util() &#123;&#125;public static void main(String[] args) throws Exception &#123;   new Thread(new Runnable() &#123;       @Override       public void run() &#123;           String str=&quot;&quot;;//这里填写data数据           String data = getData(str);           try &#123;               System.out.println(java.net.URLDecoder.decode(data, &quot;UTF-8&quot;));           &#125; catch (UnsupportedEncodingException e) &#123;               throw new RuntimeException(e);           &#125;           try &#123;               post(&quot;http://xyjkdkfx.hbmzu.edu.cn/index/s.clock_in/post.html&quot;,&quot;&quot;,data);//第一个填写网站           &#125; catch (Exception e) &#123;               throw new RuntimeException(e);           &#125;       &#125;   &#125;).start();&#125;public static String getData(String orData)&#123;    String data=&quot;&quot;;    String[] split = orData.split(&quot;&amp;&quot;);    Random random = new Random(System.currentTimeMillis());    for (int i = 0; i &lt; split.length; i++) &#123;        if (split[i].contains(&quot;temperature&quot;))&#123;            String[] str = split[i].split(&quot;=&quot;);            double i1 =(double) random.nextInt() % 10 / 10;            if (i1&lt;0)&#123;                i1*=-1;            &#125;            double temperature=36.0+ (double) i1;            str[1]=temperature+&quot;&quot;;            System.out.println(&quot;正在自动填写随机体温.......\n随机体温为:&quot;+temperature);            split[i]=Merge_string(str);        &#125;    &#125;    for (int i = 0; i &lt; split.length; i++) &#123;        if (i!= split.length-1)&#123;            data+=split[i];            data+=&quot;&amp;&quot;;        &#125;else &#123;            data+=split[i];        &#125;    &#125;    return data;&#125;public static String Merge_string(String[] strings)&#123;    String tr=null;    for (int i = 0; i &lt; strings.length; i++) &#123;        if(i!=strings.length-1)&#123;            tr+=strings[i];            tr+=&quot;=&quot;;        &#125;else &#123;            tr+=strings[i];        &#125;    &#125;    return tr;&#125;public static void post (String url,String header,String body)throws Exception&#123;    URL obj = new URL(url);    HttpURLConnection con =(HttpURLConnection) obj.openConnection();    //添加请求头    con.setRequestMethod(&quot;POST&quot;);    setHeader(con,header);    //发送Post请求    con.setDoOutput(true);    DataOutputStream wr = new DataOutputStream(con.getOutputStream());    wr.writeBytes(body);    wr.flush();    wr.close();    int responseCode = con.getResponseCode();    System.out.println(&quot;\nSending &#39;POST&#39; request to URL : &quot; + url);    System.out.println(&quot;Post parameters : &quot; + body);    System.out.println(&quot;Response Code : &quot; + responseCode);    BufferedReader in = new BufferedReader(            new InputStreamReader(con.getInputStream(),&quot;utf-8&quot;));    String inputLine;    StringBuffer response = new StringBuffer();    while ((inputLine = in.readLine()) != null) &#123;        response.append(inputLine);    &#125;    in.close();    //打印结果    System.out.println(response.toString());&#125;private static void setHeader(HttpURLConnection con,String cookie) &#123;    con.setRequestProperty(&quot;User-Agent&quot;,&quot; Mozilla/5.0 (Linux; Android 12; M2012K11AC Build/SKQ1.211006.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/86.0.4240.99 XWEB/4255 MMWEBSDK/20220505 Mobile Safari/537.36 MMWEBID/2090 MicroMessenger/8.0.23.2160(0x28001757) WeChat/arm64 Weixin NetType/WIFI Language/zh_CN ABI/arm64&quot;);    con.setRequestProperty(&quot;Accept-Language&quot;, &quot;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&quot;);    con.setRequestProperty(&quot;Accept&quot;,&quot; text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/wxpic,image/tpg,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;);    con.setRequestProperty(&quot;Accept-Encoding&quot;,&quot;&quot;);    con.setRequestProperty(&quot;Cookie&quot;,&quot;&quot;);//这里填写cookie&#125;&#125;</code></pre><hr><h4 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h4><pre><code>import requestsclass Auto:    def run(self):        url = &quot;这里填写发送的地址&quot;        personCookie = &quot;这里填写cookie&quot;        data = &quot;这里填写数据包 &quot;        headers = &#123;            &quot;User-Agent&quot;: &#39;Mozilla/5.0 (Linux; Android 12; M2012K11AC Build/SKQ1.211006.001; wv) AppleWebKit/537.36 (KHTML, &#39;                          &#39;like Gecko) Version/4.0 Chrome/86.0.4240.99 XWEB/4255 MMWEBSDK/20220505 Mobile Safari/537.36 &#39;                          &#39;MMWEBID/2090 MicroMessenger/8.0.23.2160(0x28001757) WeChat/arm64 Weixin NetType/WIFI &#39;                          &#39;Language/zh_CN ABI/arm64&#39;,            &quot;cookie&quot;: personCookie,            &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&quot;,            &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/wxpic,image/tpg,image/webp,&quot;                      &quot;image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;,            &quot;Referer&quot;: &quot;http://xyjkdkfx.hbmzu.edu.cn/index/s.clock_in/post.html&quot;,            &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,            &quot;Host&quot;: &quot;xyjkdkfx.hbmzu.edu.cn&quot;,            &quot;Connection&quot;: &quot;keep-alive&quot;,            &quot;Content-Length&quot;: &quot;590&quot;,            &quot;Cache-Control&quot;: &quot;max-age=0&quot;,            &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;,            &quot;Origin&quot;: &quot;http://xyjkdkfx.hbmzu.edu.cn&quot;,            &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;    req = requests.post(url, data=data, headers=headers)if req.status_code == 200:    print(&quot;完成发送!&quot;)else:    print(&quot;发送失败!&quot;)if __name__ == &quot;__main__&quot;:    print(&quot;开始每天自动健康打卡.....&quot;)Auto().run()</code></pre><h3 id="开始云函数建设"><a href="#开始云函数建设" class="headerlink" title="开始云函数建设"></a>开始云函数建设</h3><p><a href="https://cloud.tencent.com/login?s_url=https://console.cloud.tencent.com/scf/index?rid=1&ns=all">点我打开腾讯云</a><br><img src="/img/11.png"><br>点击从头开始<br><img src="/img/12.png"><br>再直接复制我的代码就行了<br><img src="/img/13.png"><br>再往下滑<br>设置点击事件<br><img src="/img/14.png"></p><h4 id="大功告成了"><a href="#大功告成了" class="headerlink" title="大功告成了"></a>大功告成了</h4>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
